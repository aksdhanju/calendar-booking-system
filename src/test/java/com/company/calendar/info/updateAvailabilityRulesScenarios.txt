Test Scenarios
Add merging logic of intervals. Currently assuming all intervals are mutually
exclusive/ non overlapping

0. request body is null
1. Owner id must not be blank
2. Owner Id can only contain letters, digits, hyphens, and underscores
3. Owner Id must be between 1 and 64 characters
4. rules/request body should not be null
5. Max 24 rules can be set for an owner
6. rules list should not be empty
7. If any rules startTime, endTime, dayOfWeek is null, we throw exception
8. startTime and endTime must be at full hour. Cant be 08:30. Should be 08:00
9. startTime must be equal to or before endTime
10. There should be no duplicate rules. dayOfWeek, startTime and endTime make a unique combination
11. Owner does not exist in system
12. (Success scenario)Now create user. And create availability rules for the user.
Update rule to set availability slot as 16:00 to 23:00 every day for owner 1
13. Again hit PUT http://localhost:8080/api/v1/availability/setup endpoint with same request body
You would experience idempotent behaviour. Rules would be updated/overwritten in in-memory store.


Note for create availability Rules endpoint
Some extra scenarios


0. request body is null
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--data ''
400 Bad Request
{
    "success": false,
    "message": "Invalid request format."
}

1. Owner id must not be blank
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "",
  "rules": [
    {
      "dayOfWeek": "MONDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    }
  ]
}'

400 Bad request
{
    "success": false,
    "message": "Validation failed: Owner Id must not be blank"
}

2. Owner Id can only contain letters, digits, hyphens, and underscores
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "$$123",
  "rules": [
    {
      "dayOfWeek": "MONDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    }
  ]
}'

400 Bad request
{
    "success": false,
    "message": "Validation failed: Owner Id can only contain letters, digits, hyphens, and underscores"
}
3. Owner Id must be between 1 and 64 characters

4. rules should not be null
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": null
}'
--data ''

400 Bad Request
{
    "success": false,
    "message": "Validation failed: Rules list must not be null"
}

5. Max 24 rules can be set for an owner

6. rules list should not be empty
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": []
}'
400 Bad Request
{
    "success": false,
    "message": "Validation failed: Invalid availability rules"
}

7. If any rules startTime, endTime, dayOfWeek is null, we throw exception
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": [
    {
      "dayOfWeek": "",
      "startTime": "16:00",
      "endTime": "23:00"
    }
  ]
}'

400 Bad Request
{
    "success": false,
    "message": "Invalid value for field 'dayOfWeek': "
}
8. startTime and endTime must be at full hour. Cant be 08:30. Should be 08:00
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": [
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "16:30",
      "endTime": "23:00"
    }
  ]
}'
400 Bad Request
{
    "success": false,
    "message": "Validation failed: Start and end time must be at full hour"
}

9. startTime must be equal to or before endTime
Request:
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": [
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "23:00",
      "endTime": "16:00"
    }
  ]
}'

Response:
400 Bad Request:
{
    "success": false,
    "message": "Validation failed: Start time must not be after end time"
}
10. There should be no duplicate rules. dayOfWeek, startTime and endTime make a unique combination
Request:
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": [
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "16:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "16:00",
      "endTime": "17:00"
    }
  ]
}'
Response 400 Bad Request
{
    "success": false,
    "message": "Validation failed: Duplicate time window for same day and rule type"
}


11. Owner does not exist in system
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "123",
  "rules": [
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "16:00",
      "endTime": "17:00"
    }
  ]
}'
Response 404 Not found
{
    "success": false,
    "message": "User not found with id: 123"
}

12.Now create user. And create availability rules for the user
Create user curl
curl --location --request PUT 'http://localhost:8080/api/v1/users/1' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "Galen",
    "email": "gsimmons@dealmerridion.com"
}'

Response 201 CREATED
{
    "success": true,
    "message": "User created successfully for id: 1"
}

Create/Update availability rules curl
Request:
curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "1",
  "rules": [
    {
      "dayOfWeek": "MONDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "TUESDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "WEDNESDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "THURSDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "FRIDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "SATURDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    }
  ]
}'

Response 201 CREATED
{
    "success": true,
    "message": "Availability rules created successfully for owner id: 1"
}


13. Again hit PUT http://localhost:8080/api/v1/availability/setup endpoint with same request body
You would experience idempotent behaviour. Rules would be updated/overwritten in in-memory store.
Response 200 OK:
{
    "success": true,
    "message": "Availability rules updated successfully for owner id: 1"
}


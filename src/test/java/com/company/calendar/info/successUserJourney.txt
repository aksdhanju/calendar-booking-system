single slot same start time and end time. what will be the journey and scenarios?

Step 1: Create 4 users. Galen, Mohit, Akash, Prince.
Have their name, email in metadata
q: can we create user with same name and email id with different id?

Step 2:
@Validated
duplicate in request body
merge intervals case?
Important note: endTime is included in interval. Its start time of available slot
start time can be equal to end time?
Galen will set up his availability slots from 4pm(16:00) to 11pm(23:00) every day
Mohit will set his availability slots from 9am(09:00) to 5pm(17:00) every day except Saturday, Sunday

Step 3:
date in input should be greater than current date
@validated
date format supported is yyyy-MM-dd
Call get free slots for Galen for a particular day. You should get slots as per above setting.
Similarly for Mohit. No booking has been done by any invitee till now.

Step 4:
Now Akash and Prince are preparing for interviews. And apply to Accolade. Both are invitees.
Scenario 1: Both do booking of different slot
Scenario 2: Both do booking of same slot but for different owner.
Scenario 3: Both do booking of same slot for same owner.

Step 5:
Call getupcoming appointments for Galen(ownerId = 1)
Call getupcoming appointments for Mohit(ownerId = 2)

Step 3,4,5 can be retried multiple times
Try to book an appointment for an owner and invitee.
That slot should not come in Step 3(get available slots api)
and should come in Step 5(get upcoming appointments)


Scenario 1:
First Akash does booking, then Prince. one after the other.
Akash does booking for Galen for Saturday 4pm. He should be able to do booking successful.
 Prince also wants to book time with Galen. When he will call get
 Available slots api for Galen owner, he should get Saturday 4pm-5pm as BOOKED.
Let's say he does booking from 5pm-6pm. He should be able to do booking successfully.
Now Galen calls get upcoming appointments api. He should be able to get
 Akash and Prince's upcoming appointments in response. Along with details like name, email etc.

Scenario 2 same as Scenario 1

Scenario 3:
On a side note, there should also be a provision that if appointment date has passed,
 we should remove appointment from hashmap. How we can do that?
Using cron or background thread
Akash and Prince call get available slots api for Mohit owner at same
 time for Round 2. Both get 1pm to 8pm slots free for Monday to Friday.
  Both do booking for 5pm-6pm slot on Thursday at same time.
Expectation is one booking should succeeded and other should fail.
The invitee whose booking failed now calls get available slots api for Mohit owner.
 He should see 5pm-6pm slot as BOOKED. He will now select another slot like 7pm-8pm
 and call book api to do booking. He should be able to do the booking.
Now mohit calls upcoming appointments api and sees 2 appointments on Thursday (date also).
One for Thursday 5pm-6pm and second for Thursday 7pm-8pm


Step 1:
Create 4 users. Galen, Mohit, Akash, Prince.
Have their name, email in metadata

curl --location --request PUT 'http://localhost:8080/api/v1/users/1' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E' \
--data-raw '{
    "name": "Galen",
    "email": "gsimmons@dealmerridion.com"
}'

curl --location --request PUT 'http://localhost:8080/api/v1/users/2' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E' \
--data-raw '{
    "name": "Mohit",
    "email": "maggarwal@dealmerridion.com"
}'

curl --location --request PUT 'http://localhost:8080/api/v1/users/3' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E' \
--data-raw '{
    "name": "Akash",
    "email": "asingh@gmail.com"
}'

curl --location --request PUT 'http://localhost:8080/api/v1/users/4' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E' \
--data-raw '{
    "name": "Prince",
    "email": "pkumar@gmail.com"
}'
Response: 200 OK(in each of above case)
{
    "success": true,
    "message": "User set successfully."
}


Step 2:
Galen will set up his availability slots from 4pm(16:00) to 11pm(23:00) every day.
It means 23:00 to 24:00 is included in his availability slots

curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E' \
--data '{
  "ownerId": "1",
  "rules": [
    {
      "dayOfWeek": "MONDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "TUESDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "WEDNESDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "THURSDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "FRIDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "SATURDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    },
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "16:00",
      "endTime": "23:00"
    }
  ]
}'

Response 200 OK:
{
    "success": true,
    "message": "Availability rules created successfully for owner id: 1"
}

Mohit will set his availability slots from 9am(09:00) to 5pm(17:00) every day except Saturday, Sunday

curl --location --request PUT 'http://localhost:8080/api/v1/availability/setup' \
--header 'Content-Type: application/json' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E' \
--data '{
  "ownerId": "2",
  "rules": [
    {
      "dayOfWeek": "MONDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "TUESDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "WEDNESDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "THURSDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "FRIDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "SATURDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    },
    {
      "dayOfWeek": "SUNDAY",
      "startTime": "09:00",
      "endTime": "17:00"
    }
  ]
}'

Response 201 CREATED/200 OK
{
    "success": true,
    "message": "Availability rules created successfully for owner id: 2"
}

Step 3:
Call get free slots for Galen for a particular day. You should get slots as per above setting.
Similarly for Mohit. No booking has been done by any invitee till now.

curl --location 'http://localhost:8080/api/v1/availability/1/slots?date=2025-08-03' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E'

{
    "success": true,
    "message": "Available slots fetched successfully.",
    "slots": [
        {
            "startTime": "2025-08-03 16:00:00",
            "endTime": "2025-08-03 17:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 17:00:00",
            "endTime": "2025-08-03 18:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 18:00:00",
            "endTime": "2025-08-03 19:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 19:00:00",
            "endTime": "2025-08-03 20:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 20:00:00",
            "endTime": "2025-08-03 21:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 21:00:00",
            "endTime": "2025-08-03 22:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 22:00:00",
            "endTime": "2025-08-03 23:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-03 23:00:00",
            "endTime": "2025-08-04 00:00:00",
            "bookable": true
        }
    ]
}

Similarly for Mohit. No booking has been done by any invitee till now.
curl --location 'http://localhost:8080/api/v1/availability/2/slots?date=2025-08-04' \
--header 'Cookie: JSESSIONID=D768B0EA8A86FAB4D0E43246C6AF8B3E'

{
    "success": true,
    "message": "Available slots fetched successfully.",
    "slots": [
        {
            "startTime": "2025-08-04 09:00:00",
            "endTime": "2025-08-04 10:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 10:00:00",
            "endTime": "2025-08-04 11:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 11:00:00",
            "endTime": "2025-08-04 12:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 12:00:00",
            "endTime": "2025-08-04 13:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 13:00:00",
            "endTime": "2025-08-04 14:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 14:00:00",
            "endTime": "2025-08-04 15:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 15:00:00",
            "endTime": "2025-08-04 16:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 16:00:00",
            "endTime": "2025-08-04 17:00:00",
            "bookable": true
        },
        {
            "startTime": "2025-08-04 17:00:00",
            "endTime": "2025-08-04 18:00:00",
            "bookable": true
        }
    ]
}


Step 4:
If Invitee 3 does the booking again with owner id = 3
Request:
curl --location 'http://localhost:8080/api/v1/appointments/book' \
--header 'Idempotency-Key: ascc123' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "1",
  "inviteeId" : "3",
  "startDateTime" : "2025-08-08 17:00:00"
}'
Response 201 Created
{
    "success": true,
    "message": "Appointment booked successfully for owner id: 1",
    "appointmentId": "c0430a81-b688-4855-885a-f9b40845c1e5",
    "errorCode": null
}

If Invitee 3 does the booking again with owner id = 3 with same idempotency key
Request:
curl --location 'http://localhost:8080/api/v1/appointments/book' \
--header 'Idempotency-Key: ascc12' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "1",
  "inviteeId" : "3",
  "startDateTime" : "2025-08-08 17:00:00"
}'
Response 200 OK
{
    "success": true,
    "message": "Appointment already exists for owner id: 1",
    "appointmentId": "c0430a81-b688-4855-885a-f9b40845c1e5",
    "errorCode": null
}

If Invitee 3 does the booking again with owner id = 3 with different idempotency key
Request:
curl --location 'http://localhost:8080/api/v1/appointments/book' \
--header 'Idempotency-Key: ascc12' \
--header 'Content-Type: application/json' \
--data '{
  "ownerId": "1",
  "inviteeId" : "3",
  "startDateTime" : "2025-08-08 17:00:00"
}'

Response 409 Conflict
{
    "success": false,
    "message": "Appointment slot already booked for owner: 1"
}

Step 5:
Now invitee 3 booked lot of slots fro owner 1
Owner 1 now wants to see his upcoming appointments:

Request
curl --location 'http://localhost:8080/api/v1/appointments/owner/1/upcoming'

Response: 200 OK
{
    "success": true,
    "message": "Fetched upcoming appointments successfully for owner id: 1",
    "appointments": [
        {
            "appointmentId": "de560d31-57d5-486b-807e-35ac38d4767f",
            "startTime": "2025-08-08 16:00:00",
            "endTime": "2025-08-08 17:00:00",
            "inviteeId": "3",
            "inviteeName": "Akash",
            "inviteeEmail": "asingh@gmail.com"
        },
        {
            "appointmentId": "c0430a81-b688-4855-885a-f9b40845c1e5",
            "startTime": "2025-08-08 17:00:00",
            "endTime": "2025-08-08 18:00:00",
            "inviteeId": "3",
            "inviteeName": "Akash",
            "inviteeEmail": "asingh@gmail.com"
        },
        {
            "appointmentId": "fc6e772f-0efc-45df-88d2-d5a9251c2c3e",
            "startTime": "2025-08-08 18:00:00",
            "endTime": "2025-08-08 19:00:00",
            "inviteeId": "3",
            "inviteeName": "Akash",
            "inviteeEmail": "asingh@gmail.com"
        },
        {
            "appointmentId": "7b8d2685-ad5b-4139-b937-3b188e22b468",
            "startTime": "2025-08-08 20:00:00",
            "endTime": "2025-08-08 21:00:00",
            "inviteeId": "3",
            "inviteeName": "Akash",
            "inviteeEmail": "asingh@gmail.com"
        },
        {
            "appointmentId": "bdf2e709-9f89-4d9e-90bc-f36db218bdd8",
            "startTime": "2025-08-08 21:00:00",
            "endTime": "2025-08-08 22:00:00",
            "inviteeId": "3",
            "inviteeName": "Akash",
            "inviteeEmail": "asingh@gmail.com"
        },
        {
            "appointmentId": "3d1ce2c7-71e5-4bb6-89cf-6fafdb4e5946",
            "startTime": "2025-08-08 22:00:00",
            "endTime": "2025-08-08 23:00:00",
            "inviteeId": "3",
            "inviteeName": "Akash",
            "inviteeEmail": "asingh@gmail.com"
        }
    ],
    "currentPage": 0,
    "totalPages": 1,
    "totalItems": 6
}


If owner 2 sees his upcoming appointments, he will see:
Request:
curl --location 'http://localhost:8080/api/v1/appointments/owner/2/upcoming'

Response 200 OK:
{
    "success": true,
    "message": "No upcoming appointments found for owner id: 2",
    "appointments": [],
    "currentPage": 0,
    "totalPages": 0,
    "totalItems": 0
}